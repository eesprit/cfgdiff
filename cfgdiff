#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import io
import argparse
import cfgdiff
import difflib

usage = "usage: %prog [options] fromfile tofile"
parser = argparse.ArgumentParser()
parser.add_argument('-v', '--version', action='version', version=cfgdiff.version)
parser.add_argument("-c", action="store_true", default=False,
                    help='Produce a context format diff (default)')
parser.add_argument("-u", action="store_true", default=False,
                    help='Produce a unified format diff')
hlp = 'Produce HTML side by side diff (can use -c and -l in conjunction)'
parser.add_argument("-m", action="store_true", default=False, help=hlp)
parser.add_argument("-n", action="store_true", default=False,
                    help='Produce a ndiff format diff')
hlp = 'Set number of context lines (default: %(default)s)'
parser.add_argument("-l", "--lines", type=int, default=3,
                    help=hlp)
parser.add_argument('-i', '--input-format', dest='inputformat', default='ini',
                    choices=cfgdiff.supported_formats,
                    help='parse input as %s (default: %%(default)s)' %
                    '/'.join(cfgdiff.supported_formats))
parser.add_argument('-r', '--recursive', dest='recursive', action='store_true',
                    default=False,
                    help='recursively compare any subdirectories found')
parser.add_argument('-N', '--new-file', dest='newfile', action="store_true",
                    default=False, help='treat absent files as empty')
parser.add_argument('-O', '--ordered-input', dest='ordered',
                    action="store_true",
                    default=False,
                    help='do not change order of options in the input')
if cfgdiff.reconfigure:
    hlp = 'Use this reconfigure.configs class (default: %(default)s)'
    parser.add_argument('-R', '--reconf-class', dest='reconfclass',
                        default='SambaConfig',
                        help=hlp)
parser.add_argument('fromfile')
parser.add_argument('tofile')
options = parser.parse_args()

n = options.lines

parsercls = None

if options.inputformat == 'ini':
    cls = cfgdiff.INIDiff
elif options.inputformat == 'json':
    cls = cfgdiff.JSONDiff
elif options.inputformat == 'yaml':
    cls = cfgdiff.YAMLDiff
elif options.inputformat == 'xml':
    cls = cfgdiff.XMLDiff
elif options.inputformat == 'conf':
    cls = cfgdiff.ConfigDiff
elif options.inputformat == 'reconf':
    exec("from reconfigure.configs import %s as parsercls" % options.reconfclass)
    cls = cfgdiff.ReconfigureDiff
elif options.inputformat == 'zone':
    cls = cfgdiff.ZoneDiff
elif options.inputformat == 'isc':
    cls = cfgdiff.ISCDiff

fromlist = []
tolist = []
if options.recursive and os.path.isdir(options.fromfile) and os.path.isdir(options.tofile):
    for root, _, files in os.walk(options.fromfile):
        for f in files:
            x = os.path.join(root, f)
            fromlist.append(x)
            y = os.path.join(options.tofile, os.path.relpath(x, options.fromfile))
            if os.path.exists(y):
                tolist.append(y)
            else:
                tolist.append('/dev/null')
    for root, _, files in os.walk(options.tofile):
        for f in files:
            x = os.path.join(root, f)
            if x not in tolist:
                tolist.append(x)
                y = os.path.join(options.fromfile, os.path.relpath(x, options.tofile))
                if os.path.exists(y):
                    fromlist.append(y)
                else:
                    fromlist.append('/dev/null')
elif options.recursive and (os.path.isdir(options.fromfile) or os.path.isdir(options.tofile)):
    print("cannot compare folders and files")
    sys.exit(2)
else:
    fromlist.append(options.fromfile)
    tolist.append(options.tofile)

rc = 0
for fromfile, tofile in zip(fromlist, tolist):
    if '/dev/null' in (fromfile, tofile) and not options.newfile:
        rc = 1
        if fromfile != '/dev/null':
            x = os.path.relpath(fromfile, options.fromfile)
            print('Only in %s: %s' % (options.fromfile, x))
        else:
            x = os.path.relpath(tofile, options.tofile)
            print('Only in %s: %s' % (options.tofile, x))
        continue

    fromini = cls(fromfile, options.ordered, parsercls)
    toini = cls(tofile, options.ordered, parsercls)

    if fromini.error:
        print("%s could not be parsed as a %s file:" % (fromfile, options.inputformat))
        print(" %s" % (fromini.error))
        print("It will be interpreted as an empty file.")
    if toini.error:
        print("%s could not be parsed as a %s file:" % (tofile, options.inputformat))
        print(" %s" % (toini.error))
        print("It will be interpreted as an empty file.")

    fromlines = fromini.readlines()
    tolines = toini.readlines()

    if options.u:
        diff = difflib.unified_diff(fromlines, tolines, fromfile, tofile, n=n)
    elif options.n:
        diff = difflib.ndiff(fromlines, tolines)
    elif options.m:
        diff = difflib.HtmlDiff().make_file(fromlines, tolines, fromfile,
                                            tofile, context=options.c,
                                            numlines=n)
    else:
        diff = difflib.context_diff(fromlines, tolines, fromfile, tofile, n=n)

    for line in diff:
        sys.stdout.write(line)
        rc = 1
sys.exit(rc)
